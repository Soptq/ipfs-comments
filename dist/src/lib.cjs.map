{"version":3,"file":"lib.cjs","sources":["../../src/lib.js"],"sourcesContent":["import { CommentStorage } from \"./storage.js\";\nimport * as crypto from \"crypto\";\n\nlet initialized = false;\n\nclass IPFSComments {\n  constructor() {\n    //static initialization\n  }\n\n  async initialize(appId, token, key) {\n    this.appId = appId;\n    this.commentStorage = new CommentStorage(appId, token, key);\n    await this.commentStorage.getLatestAppRouter();\n  }\n\n  static async create(appId, token, key = \"\") {\n    if (initialized) {\n      throw new Error(\"IPFSComments is already initialized\");\n    }\n    initialized = true;\n    const ipfsComments = new IPFSComments();\n    await ipfsComments.initialize(appId, token, key);\n    return ipfsComments;\n  }\n\n  tryInsertComment(comment, parentId, allComments) {\n    for (const _comment of allComments) {\n      if (_comment.commentId === parentId) {\n        _comment.replies.push(comment);\n        return true;\n      } else {\n        if (this.tryInsertComment(comment, parentId, _comment.replies)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  mergeComments(baseComments, newComments) {\n    const commentIdMap = {};\n    for (const comment of baseComments) {\n      commentIdMap[comment.commentId] = comment;\n    }\n\n    for (const comment of newComments) {\n      if (comment.commentId in commentIdMap) {\n        const baseHistoryMap = {};\n        for (const baseHistory in commentIdMap[comment.commentId].history) {\n          baseHistoryMap[baseHistory.timestamp] = baseHistory;\n        }\n\n        for (const newHistory of comment.history) {\n          if (newHistory.timestamp in baseHistoryMap) {\n            baseHistoryMap[newHistory.timestamp] = newHistory;\n          }\n        }\n\n        commentIdMap[comment.commentId].history = Object.values(baseHistoryMap);\n        commentIdMap[comment.commentId].comment = comment.comment;\n        commentIdMap[comment.commentId].timestamp = comment.timestamp;\n        commentIdMap[comment.commentId].replies = this.mergeComments(\n          commentIdMap[comment.commentId].replies,\n          comment.replies\n        );\n      } else {\n        commentIdMap[comment.commentId] = comment;\n      }\n    }\n\n    return Object.values(commentIdMap);\n  }\n\n  mergeRouters(baseRouter, newRouter) {\n    for (const newPage of Object.keys(newRouter.router)) {\n      if (newPage in baseRouter.router) {\n        baseRouter.router[newPage] = newRouter.router[newPage];\n      }\n    }\n    return baseRouter;\n  }\n\n  async getLatestStates(pageId, currentTimestamp) {\n    let comments = await this.getComments(pageId);\n    let router = this.commentStorage.cache.get(\"router\");\n\n    const pageCount = await this.commentStorage.getNameCount(pageId);\n    const currentEpoch =\n      pageId in router.router ? router.router[pageId].epoch : -1;\n    if (pageCount !== currentEpoch + 1) {\n      const lastTimestamp =\n        this.commentStorage.cache.get(\"router\").router[pageId].timestamp || 0;\n\n      const rcids = await this.commentStorage.getCidBetweenTimestamp(\n        \"router\",\n        lastTimestamp,\n        currentTimestamp\n      );\n      for (const cid of rcids) {\n        const mergeRouter = await this.commentStorage.pull(cid);\n        router = this.mergeRouters(router, mergeRouter);\n      }\n\n      // merge all comments between last epoch and current epoch\n      const pcids = await this.commentStorage.getCidBetweenTimestamp(\n        pageId,\n        lastTimestamp,\n        currentTimestamp\n      );\n      for (const cid of pcids) {\n        const mergeComments = await this.commentStorage.pull(cid);\n        comments = this.mergeComments(comments, mergeComments);\n      }\n    }\n\n    return {\n      router: router,\n      comments: comments,\n      epoch: pageCount,\n    };\n  }\n\n  async addComment(pageId, comment, replyTo = undefined) {\n    const currentTimestamp = Date.now();\n    let resp = await this.getLatestStates(pageId, currentTimestamp);\n    let comments = resp.comments;\n    let router = resp.router;\n\n    const commentId = crypto\n      .createHash(\"sha256\")\n      .update(`${comment}/${Date.now()}`)\n      .digest(\"hex\");\n    const formattedComment = {\n      commentId: commentId,\n      replies: [],\n      comment: comment,\n      history: [],\n      timestamp: currentTimestamp,\n    };\n    const isInserted = this.tryInsertComment(\n      formattedComment,\n      replyTo,\n      comments\n    );\n    if (!isInserted) {\n      comments.push(formattedComment);\n    }\n\n    router.router[pageId] = {\n      cid: await this.commentStorage.push(pageId, comments, currentTimestamp),\n      timestamp: currentTimestamp,\n      epoch: resp.epoch,\n    };\n    router.lastUpdated = currentTimestamp;\n    this.commentStorage.cache.set(router.router[pageId].cid, comments);\n    this.commentStorage.cache.set(\"router\", router);\n    await this.commentStorage.push(\"router\", router, currentTimestamp);\n\n    return commentId;\n  }\n\n  tryEditComment(newComment, commentId, allComments, currentTimestamp) {\n    for (const _comment of allComments) {\n      if (_comment.commentId === commentId) {\n        _comment.history.push({\n          comment: _comment.comment,\n          timestamp: _comment.timestamp,\n        });\n        _comment.comment = newComment;\n        _comment.timestamp = currentTimestamp;\n        return true;\n      } else {\n        if (\n          this.tryEditComment(\n            newComment,\n            commentId,\n            _comment.replies,\n            currentTimestamp\n          )\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  async editComment(pageId, newComment, commentId) {\n    const currentTimestamp = Date.now();\n    let resp = await this.getLatestStates(pageId, currentTimestamp);\n    let comments = resp.comments;\n    let router = resp.router;\n\n    const isEdited = this.tryEditComment(\n      newComment,\n      commentId,\n      comments,\n      currentTimestamp\n    );\n    if (!isEdited) {\n      throw new Error(\"Comment not found\");\n    }\n\n    router.router[pageId] = {\n      cid: await this.commentStorage.push(pageId, comments, currentTimestamp),\n      timestamp: currentTimestamp,\n      epoch: resp.epoch,\n    };\n    router.lastUpdated = currentTimestamp;\n    this.commentStorage.cache.set(router.router[pageId].cid, comments);\n    this.commentStorage.cache.set(\"router\", router);\n    await this.commentStorage.push(\"router\", router, currentTimestamp);\n\n    return commentId;\n  }\n\n  async removeComment(pageId, commentId) {\n    return await this.editComment(pageId, \"[deleted]\", commentId);\n  }\n\n  async getComments(pageId) {\n    const routingTable = this.commentStorage.cache.get(\"router\").router;\n    if (pageId in routingTable) {\n      const cid = routingTable[pageId].cid;\n      return this.commentStorage.cache.cached_get(cid, async () => {\n        return await this.commentStorage.pull(cid);\n      });\n    } else {\n      return [];\n    }\n  }\n}\n\nexport { IPFSComments };\n"],"names":["CommentStorage","crypto"],"mappings":"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"}